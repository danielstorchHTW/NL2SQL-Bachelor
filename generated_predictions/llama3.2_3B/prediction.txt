SELECT COUNT(Singer_ID) FROM singer	concert_singer
SELECT COUNT(Singer_ID) FROM singer	concert_singer
SELECT Name, Country, Age FROM singer ORDER BY Age DESC	concert_singer
SELECT Name, Country, Age FROM singer ORDER BY Age DESC	concert_singer
SELECT AVG(T1.Age), MIN(T1.Age), MAX(T1.Age) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Country = 'France'	concert_singer
SELECT AVG(T1.Age), MIN(T1.Age), MAX(T1.Age) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Country = 'France'	concert_singer
SELECT T1.Name, T2.Song_release_year FROM singer AS T1 INNER JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID INNER JOIN concert AS T4 ON T3.concert_ID = T4.concert_ID INNER JOIN stadium AS T5 ON T4.Stadium_ID = T5.Stadium_ID ORDER BY T1.Age LIMIT 1	concert_singer
SELECT T1.Name, T1.Song_release_year FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID ORDER BY T1.Age LIMIT 1	concert_singer
SELECT DISTINCT T1.Country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age > 20	concert_singer
SELECT DISTINCT T2.Country FROM singer_in_concert AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Age > 20	concert_singer
SELECT T2.Country, COUNT(T1.Singer_ID) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Country	concert_singer
SELECT Country, COUNT(*) FROM singer GROUP BY Country	concert_singer
SELECT T2.Song_Name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age > ( SELECT AVG(Age) FROM singer )	concert_singer
SELECT T1.Song_Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.concert_ID IN ( SELECT concert_ID FROM concert WHERE Year > ( SELECT AVG(Year) FROM concert ) )	concert_singer
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000	concert_singer
SELECT LOCATION, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000	concert_singer
SELECT MAX(Capacity), AVG(Average) FROM stadium	concert_singer
SELECT AVG(Capacity) , MAX(Capacity) FROM stadium	concert_singer
SELECT Name, Capacity FROM stadium WHERE Average = ( SELECT MAX(Average) FROM stadium )	concert_singer
SELECT Name, Capacity FROM stadium WHERE Average = ( SELECT MAX(Average) FROM stadium )	concert_singer
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015)	concert_singer
SELECT COUNT(DISTINCT T1.concert_ID) FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE YEAR(T1.Year) IN (2014, 2015)	concert_singer
SELECT T1.Name ,  COUNT(DISTINCT T2.concert_Name) FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name	concert_singer
SELECT Stadium_ID ,  COUNT(DISTINCT concert_ID) FROM concert GROUP BY Stadium_ID	concert_singer
SELECT T1.Name, T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year >= 2014 GROUP BY T2.Stadium_ID ORDER BY COUNT(T2.concert_ID) DESC LIMIT 1	concert_singer
SELECT T1.Name, T1.Capacity FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > 2013 GROUP BY T1.Stadium_ID ORDER BY COUNT(T2.concert_ID) DESC LIMIT 1	concert_singer
SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1	concert_singer
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1	concert_singer
SELECT Name FROM stadium WHERE Stadium_ID NOT IN ( SELECT Stadium_ID FROM concert )	concert_singer
SELECT Name FROM stadium WHERE Stadium_ID NOT IN ( SELECT Stadium_ID FROM concert )	concert_singer
SELECT T1.Country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age > 40 OR T1.Age < 30	concert_singer
SELECT T1.Name FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year != 2014	concert_singer
SELECT Name FROM stadium WHERE Stadium_ID NOT IN ( SELECT Stadium_ID FROM concert WHERE Year = 2014 )	concert_singer
SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_ID	concert_singer
SELECT T1.concert_Name, T2.Theme, COUNT(T3.Singer_ID) FROM concert AS T1 INNER JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID INNER JOIN singer AS T3 ON T2.Singer_ID = T3.Singer_ID GROUP BY T1.concert_Name	concert_singer
SELECT T1.Name, COUNT(T2.concert_ID) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name	concert_singer
SELECT T1.Name, COUNT(T2.concert_ID) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name	concert_singer
SELECT T2.Name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID WHERE T1.Year = 2014	concert_singer
SELECT T1.Name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = 2014	concert_singer
SELECT T1.Name, T2.Country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.concert_ID IN ( SELECT concert_ID FROM concert WHERE concert_Name LIKE '%Hey%' )	concert_singer
SELECT T1.Name, T1.Country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.song_Name LIKE '%Hey%'	concert_singer
SELECT T2.Location ,  T2.Name FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE YEAR IN (2014, 2015)	concert_singer
SELECT T1.Location, T1.Name FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year IN (2014, 2015)	concert_singer
SELECT COUNT(*) FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Capacity = ( SELECT MAX(Capacity) FROM stadium )	concert_singer
SELECT COUNT(*) FROM concert WHERE Stadium_ID = ( SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1 )	concert_singer
SELECT COUNT(*) FROM Pets WHERE weight > 10	pets_1
SELECT COUNT(DISTINCT T1.PetID) FROM Has_Pet AS T1 INNER JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.weight > 10	pets_1
SELECT T2.weight FROM Pets AS T1 INNER JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID WHERE T1.petType = 'dog' ORDER BY T1.pet_age LIMIT 1	pets_1
SELECT MIN(T2.weight) FROM Pets AS T1 INNER JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID WHERE T1.petType = 'dog'	pets_1
SELECT T2.pet_type ,  MAX(T2.weight) FROM Pets AS T1 INNER JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID GROUP BY T1_pet_type	pets_1
SELECT max(weight), pet_type FROM Pets GROUP BY pet_type	pets_1
SELECT COUNT(T1.PetID) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age > 20	pets_1
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20	pets_1
SELECT COUNT(*) FROM Pets AS T1 INNER JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID INNER JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T1.petType = 'Dog' AND T3.Sex = 'F'	pets_1
SELECT COUNT(DISTINCT T2.StuID) FROM Pets AS T1 INNER JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID INNER JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T1.petType = 'Dog' AND T3.Sex = 'Female'	pets_1
SELECT COUNT(DISTINCT PetType) FROM Pets	pets_1
SELECT COUNT(DISTINCT PetType) FROM Pets	pets_1
SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog'))	pets_1
SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.petType IN ('Cat', 'Dog')	pets_1
SELECT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'Cat' ) AND PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'Dog' ) )	pets_1
SELECT DISTINCT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_type IN ('cat', 'dog')	pets_1
SELECT Major ,  Age FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet AS T1 INNER JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE PetType = 'Cat' )	pets_1
SELECT T1.Major, T2.Age FROM Student AS T1 LEFT JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.PetID NOT IN (SELECT PetID FROM Pets WHERE PetType = 'cat')	pets_1
SELECT StuID FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet AS H INNER JOIN Pets AS P ON H.PetID = P.PetID WHERE PetType = 'Cat' )	pets_1
SELECT StuID FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet AS T1 INNER JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE PetType = 'Cat' )	pets_1
SELECT T1.Fname, T1.Age FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.petType = 'Dog' AND T3_pettype != 'Cat'	pets_1
SELECT Fname FROM Student WHERE PetID IN ( SELECT PetID FROM Has_Pet AS h1 INNER JOIN Pets AS p1 ON h1.PetID = p1.PetID WHERE PetType = 'Dog' ) EXCEPT SELECT Fname FROM Student WHERE PetID IN ( SELECT PetID FROM Has_Pet AS h2 INNER JOIN Pets AS p2 ON h2.PetID = p2.PetID WHERE PetType = 'Cat' )	pets_1
SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1	pets_1
SELECT T1.PetType, T2.weight FROM Pets AS T1 INNER JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID ORDER BY T1.pet_age ASC LIMIT 1	pets_1
SELECT T2.PetID, T2.weight FROM Pets AS T2 JOIN Has_Pet AS T1 ON T2.PetID = T1.PetID WHERE T2.pet_age > 1	pets_1
SELECT T2.PetID, T2.weight FROM Pets AS T2 INNER JOIN Has_Pet AS T1 ON T2.PetID = T1.PetID WHERE T2.pet_age > 1	pets_1
SELECT AVG(pet_age) ,  MAX(pet_age) FROM Pets GROUP BY PetType	pets_1
SELECT PetType ,  AVG(pet_age) AS avg_age ,  MAX(pet_age) AS max_age FROM Pets GROUP BY PetType	pets_1
SELECT PetType ,  AVG(weight) FROM Pets GROUP BY PetType	pets_1
SELECT AVG(T2.weight) ,  T1.petType FROM Pets AS T1 INNER JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID GROUP BY T1.petType	pets_1
SELECT Fname ,  Age FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet )	pets_1
SELECT DISTINCT Fname ,  Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID	pets_1
SELECT T1.PetID FROM Has_Pet AS T1 INNER JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.LName = 'Smith'	pets_1
SELECT T2.PetID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T1.LName = 'Smith'	pets_1
SELECT COUNT(DISTINCT T1.StuID) FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID	pets_1
SELECT COUNT(DISTINCT T2.PetID) FROM Has_Pet AS T1 INNER JOIN Pets AS T2 ON T1.PetID = T2.PetID	pets_1
SELECT T1.Fname ,  T1.Sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING COUNT(*) > 1	pets_1
SELECT Fname ,  Sex FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID)  >  1 )	pets_1
SELECT LName FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_type = 'cat' AND pets.pet_age = 3	pets_1
SELECT T1.LName FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = 3 AND T3.pet_type = 'cat'	pets_1
SELECT AVG(T1.Age) FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.PetID IS NULL	pets_1
SELECT AVG(T2.age) FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.PetID IS NULL	pets_1
SELECT COUNT(*) FROM continents	car_1
SELECT COUNT(*) FROM continents	car_1
SELECT T1.ContId, T1.Continent, COUNT(T2.CountryId) FROM continents AS T1 INNER JOIN countries AS T2 ON T1 ContId = T2 Continent GROUP BY T1.ContId	car_1
SELECT ContId, Continent, COUNT(CountryId) FROM continents GROUP BY ContId	car_1
SELECT COUNT(DISTINCT T1.CountryName) FROM countries AS T1 INNER JOIN continents AS T2 ON T1.Continent = T2.ContId	car_1
SELECT COUNT(CountryId) FROM countries	car_1
SELECT T1.FullName, T2.Id, COUNT(*) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id	car_1
SELECT T2.FullName, T1.Id, COUNT(T3.ModelId) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker INNER JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T1.Id	car_1
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId ORDER BY T1.Horsepower ASC LIMIT 1	car_1
SELECT Model FROM cars_data ORDER BY Horsepower ASC LIMIT 1	car_1
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId GROUP BY T2.Model HAVING AVG(T1.Weight) > ( SELECT AVG(Weight) FROM cars_data )	car_1
SELECT T1.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.MakeId = T2.MakeId WHERE T1.Weight < ( SELECT AVG(Weight) FROM cars_data )	car_1
SELECT DISTINCT T2.Maker FROM cars_data AS T1 INNER JOIN car_makers AS T2 ON T1.Id = T2.Id WHERE T1.Year = 1970	car_1
SELECT DISTINCT T1.FullName FROM car_makers AS T1 INNER JOIN cars_data AS T2 ON T1.Country = T2.Country WHERE YEAR(T2.Year) = 1970	car_1
SELECT T1.Make, T2.Year FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Year LIMIT 1	car_1
SELECT T2.Maker, MIN(T1.Year) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId GROUP BY T2.Maker	car_1
SELECT DISTINCT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Year > 1980	car_1
SELECT DISTINCT T3.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId INNER JOIN model_list AS T3 ON T2.Model = T3.ModelId WHERE T1.Year > 1980	car_1
SELECT T2.Continent, COUNT(T1.CountryId) FROM countries AS T1 INNER JOIN continents AS T2 ON T1.Continent = T2.ContId GROUP BY T2.Continent	car_1
SELECT T1.Continent, COUNT(T2.Id) FROM continents AS T1 LEFT JOIN car_makers AS T2 ON T1.ContId = T2.Country GROUP BY T1.Continent	car_1
SELECT T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName ORDER BY COUNT(T2.Id) DESC LIMIT 1	car_1
SELECT T2.CountryName FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.Continent GROUP BY T2.CountryName ORDER BY COUNT(T2.CountryId) DESC LIMIT 1	car_1
SELECT COUNT(T1.ModelId), T2.FullName FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Id GROUP BY T2.FullName	car_1
SELECT COUNT(*) ,  T1.Id ,  T1.FullName FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id	car_1
SELECT T2.Accelerate FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'AMC Hornet Sportabout (SW)'	car_1
SELECT T2.Accelerate FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'AMC Hornet Sportabout ( SW )'	car_1
SELECT COUNT(Id) FROM car_makers WHERE Country = 'France'	car_1
SELECT COUNT(DISTINCT T1.Maker) FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryName WHERE T2.Continent = 'Europe' AND T1.Country = 'France'	car_1
SELECT COUNT(T2.Model) FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.Country = T2.Country WHERE T1.Continent = 'USA'	car_1
SELECT COUNT(DISTINCT T1.Model) FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.MakeId = T2.ModelId INNER JOIN car_makers AS T3 ON T2.Maker = T3.Id INNER JOIN countries AS T4 ON T3.Country = T4.Continent WHERE T4.Continent = 'United States'	car_1
SELECT AVG(T2.MPG) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4	car_1
SELECT AVG(T1.MPG) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'Model' AND T1.Cylinders = 4	car_1
SELECT MIN(T2.Weight) FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.ModelId WHERE T1.Year = 1974 AND T1.Cylinders = 8	car_1
SELECT MIN(T1.Weight) FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.MakeId = T2.ModelId INNER JOIN car_makers AS T3 ON T2.Maker = T3.Id WHERE T2.Model = '8 cylinders' AND YEAR(T1.Id) = 1974	car_1
SELECT DISTINCT T1.Maker, T2.Model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker	car_1
SELECT T2.Maker, T2.Model FROM car_names AS T2 INNER JOIN model_list AS T1 ON T2.Model = T1.Model	car_1
SELECT CountryName ,  CountryId FROM countries WHERE CountryId IN ( SELECT Country FROM car_makers )	car_1
SELECT CountryName, CountryId FROM countries WHERE CountryId IN ( SELECT Country FROM car_makers )	car_1
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150	car_1
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150	car_1
SELECT AVG(T1.Weight) ,  T2.Year FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId	car_1
SELECT AVG(Weight), YEAR FROM cars_data GROUP BY YEAR	car_1
SELECT T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.Country = T2.Country GROUP BY T1.CountryName HAVING COUNT(T2.Maker) >= 3	car_1
SELECT DISTINCT T2.CountryName FROM continents AS T1 INNER JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T2.CountryName HAVING COUNT(T2.CountryId) >= 3	car_1
SELECT T2.MP, T1.FullName FROM cars_data AS T1 INNER JOIN car_makers AS T2 ON T1.Id = T2.Country WHERE T1.Cylinders = 3 ORDER BY T1.Horsepower DESC LIMIT 1	car_1
SELECT T2.Make, MAX(T1.Horsepower) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make	car_1
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.MakeId = T2.MakeId ORDER BY T1.MPG DESC LIMIT 1	car_1
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId GROUP BY T2.Model ORDER BY AVG(T1.MPG) DESC LIMIT 1	car_1
SELECT AVG(T1.Horsepower) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Year < 1980	car_1
SELECT AVG(T2.Horsepower) FROM continents AS T1 INNER JOIN countries AS T2 ON T1.ContId = T2.Continent INNER JOIN cars_data AS T3 ON T2.CountryId = T3.Id WHERE T3.Year < 1980	car_1
SELECT AVG(T1.Edispl) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo'	car_1
SELECT AVG(T1.Edispl) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId INNER JOIN model_list AS T3 ON T2.Model = T3.Model INNER JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.FullName = 'VOLVO'	car_1
SELECT T2.Accelerate, T1.Cylinders FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.MakeId = T2.Maker GROUP BY T2.Cylinders ORDER BY MAX(T2.Accelerate) DESC	car_1
SELECT MAX(T1.Accelerate) FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Model	car_1
SELECT Model FROM car_names GROUP BY Model ORDER BY COUNT(MakeId) DESC LIMIT 1	car_1
SELECT Model FROM car_names GROUP BY Model ORDER BY COUNT(DISTINCT MakeId) DESC LIMIT 1	car_1
SELECT COUNT(Id) FROM cars_data WHERE Cylinders > 4	car_1
SELECT COUNT(T1.MPG) FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.MakeId = T2.ModelId INNER JOIN car_makers AS T3 ON T2.Maker = T3.Id WHERE T3.Cylinders > 4	car_1
SELECT COUNT(*) FROM cars_data WHERE Year = 1980	car_1
SELECT SUM(CASE WHEN YEAR = 1980 THEN 1 ELSE 0 END) FROM cars_data	car_1
SELECT COUNT(T2.ModelId) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'	car_1
SELECT COUNT(T2.ModelId) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'	car_1
SELECT T1.FullName, T1.Id FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Maker HAVING COUNT(T2.ModelId) > 3	car_1
SELECT MakeId, FullName FROM car_makers GROUP BY MakeId HAVING COUNT(Distinct Model) > 3	car_1
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Maker = 'General Motors' OR T1.Weight > 3500	car_1
SELECT DISTINCT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Maker = 'General Motors' OR T1.Weight > 3500	car_1
SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000	car_1
SELECT DISTINCT YEAR FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT YEAR FROM cars_data WHERE Weight > 3000	car_1
SELECT T2.Horsepower FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId ORDER BY T1.Accelerate DESC LIMIT 1	car_1
SELECT MAX(T2.Horsepower) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId ORDER BY T1.Accelerate DESC LIMIT 1	car_1
SELECT MIN(T2.Cylinders) FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.MakeId = T2.ModelId WHERE T2.Model = 'Volvo'	car_1
SELECT MIN(T2.Cylinders) FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'Volvo'	car_1
SELECT COUNT(T2.Id) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Accelerate > ( SELECT MAX(Horsepower) FROM cars_data )	car_1
SELECT COUNT(T1.Id) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.MakeId = T2.MakeId WHERE T1.Accelerate < ( SELECT MAX(Horsepower) FROM cars_data )	car_1
SELECT COUNT(DISTINCT T1.CountryId) FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.Continent = T2.Country WHERE T2.Id IN ( SELECT Id FROM car_makers GROUP BY Id HAVING COUNT(CountryId) > 2 )	car_1
SELECT COUNT(T2.CountryId) FROM continents AS T1 INNER JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T2.Continent HAVING COUNT(DISTINCT T2.CountryName) > 2	car_1
SELECT COUNT(T1.Id) FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.MakeId = T2.ModelId WHERE T1.Cylinders > 6	car_1
SELECT COUNT(T1.Id) FROM cars_data AS T1 INNER JOIN car_makers AS T2 ON T1.MakeId = T2.Id WHERE T1.Cylinders > 6	car_1
SELECT Model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.MPG = 4 AND T1.Model = T2.Model GROUP BY T1.Model ORDER BY MAX(T2.Horsepower) LIMIT 1	car_1
SELECT T1.Model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.Horsepower DESC LIMIT 1	car_1
SELECT T1.MakeId, T2.MakerName FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > ( SELECT MIN(Horsepower) FROM cars_data ) AND T1.Cylinders <= 3	car_1
SELECT T2.MakeId, T1.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower != ( SELECT MIN(Horsepower) FROM cars_data ) AND T1.Cylinders < 4	car_1
SELECT MAX(T1.MPG) FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.ModelId WHERE T2.Cylinders = 8 OR T1.Year < 1980	car_1
SELECT MAX(T1.MPG) FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.MakeId = T2.ModelId WHERE T2.Maker = 'Volkswagen' OR T1.Year < 1980	car_1
SELECT Model FROM car_names WHERE Make = 'Ford Motor Company' EXCEPT SELECT Model FROM cars_data WHERE Weight < 3500	car_1
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Weight < 3500 AND T2.Maker != 'Ford Motor Company'	car_1
SELECT DISTINCT T2.CountryName FROM continents AS T1 INNER JOIN countries AS T2 ON T1.ContId = T2.Continent WHERE T2.CountryId NOT IN ( SELECT Country FROM car_makers )	car_1
SELECT T2.CountryName FROM continents AS T1 INNER JOIN countries AS T2 ON T1.ContId = T2.Continent WHERE T2.CountryId NOT IN ( SELECT Country FROM car_makers )	car_1
SELECT Id, Maker FROM car_makers GROUP BY Id HAVING COUNT(DISTINCT Model) >= 2 AND COUNT(Id) > 3	car_1
SELECT Id, Maker FROM car_makers GROUP BY Maker HAVING COUNT(DISTINCT ModelId) > 2 AND COUNT(Id) > 3	car_1
SELECT CountryId, CountryName FROM countries WHERE COUNT(DISTINCT T2.Country) > 3 OR Model = 'Fiat'	car_1
SELECT CountryId, CountryName FROM countries WHERE CountryId IN ( SELECT CountryId FROM car_makers GROUP BY CountryId HAVING COUNT(Id) > 3 ) OR CountryName = 'Italy'	car_1
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'	flight_2
SELECT CountryAbbrev FROM airlines WHERE Airline = 'Jetblue Airways'	flight_2
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'	flight_2
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'	flight_2
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'	flight_2
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'	flight_2
SELECT AirportCode ,  AirportName FROM airports WHERE City = 'Anthony'	flight_2
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'	flight_2
SELECT COUNT(uid) FROM airlines	flight_2
SELECT COUNT(uid) FROM airlines	flight_2
SELECT COUNT(AirportCode) FROM airports	flight_2
SELECT COUNT(AirportCode) FROM airports	flight_2
SELECT COUNT(*) FROM flights	flight_2
SELECT COUNT(*) FROM flights	flight_2
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL '	flight_2
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL '	flight_2
SELECT COUNT(uid) FROM airlines WHERE Country = 'USA'	flight_2
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'	flight_2
SELECT T1.City, T2.Country FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.AirportName = 'Alton'	flight_2
SELECT City, CountryAbb FROM airports WHERE AirportCode = 'ALN'	flight_2
SELECT AirportName FROM airports WHERE AirportCode = 'AKO '	flight_2
SELECT AirportName FROM airports WHERE AirportCode = 'AKO '	flight_2
SELECT AirportName FROM airports WHERE City = 'Aberdeen'	flight_2
SELECT AirportName FROM airports WHERE City = 'Aberdeen'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'APG'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'APG '	flight_2
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'	flight_2
SELECT COUNT(*) FROM airports WHERE CountryAbbrev = 'ATO'	flight_2
SELECT COUNT(DISTINCT T2.FlightNo) FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = 'Aberdeen'	flight_2
SELECT COUNT(DISTINCT T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'	flight_2
SELECT COUNT(T2.FlightNo) FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.City = 'Aberdeen'	flight_2
SELECT COUNT(T1.SourceAirport) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T1.SourceAirport IN ( SELECT T3.City FROM airports AS T3 WHERE T3.City = 'Aberdeen' ) AND T2.City = 'Ashley'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Ashley' AND T2.Country = 'Aberdeen'	flight_2
SELECT COUNT(DISTINCT FlightNo) FROM flights WHERE Airline = 'JetBlue Airways'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.Abbreviation WHERE T2.Abbreviation = 'JBL'	flight_2
SELECT COUNT(DISTINCT T2.FlightNo) FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T1.Abbreviation = 'UN' AND T2.DestAirport = 'ASY'	flight_2
SELECT COUNT(DISTINCT T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T1.Airline = 'United' AND T2.AirportName = 'ASY Airport'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T1.Airline = 'United Airlines' AND T2.City = 'Ahdod'	flight_2
SELECT COUNT(T2.FlightNo) FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.Abbreviation = 'UA' AND T2.SourceAirport = T1.Uid WHERE T2.DestAirport = 'AHD'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T1.Airline = 'United Airlines' AND T2.City = 'Aberdeen'	flight_2
SELECT COUNT(DISTINCT T2.FlightNo) FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.Abbreviation = T2.Airline WHERE T1.Airline = 'United Airlines' AND T2.DestAirport = ( SELECT AirportCode FROM airports WHERE City = 'Aberdeen' )	flight_2
SELECT City FROM airports GROUP BY City ORDER BY COUNT(Distinct FlightNo) DESC LIMIT 1	flight_2
SELECT T2.City FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode GROUP BY T2.City ORDER BY COUNT(T1.DestAirport) DESC LIMIT 1	flight_2
SELECT T1.City FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY COUNT(T2.FlightNo) DESC LIMIT 1	flight_2
SELECT T1.City FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY COUNT(*) DESC LIMIT 1	flight_2
SELECT T1.AirportCode FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.AirportCode ORDER BY COUNT(T2.FlightNo) DESC LIMIT 1	flight_2
SELECT T1.AirportCode FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.AirportCode ORDER BY COUNT(*) DESC LIMIT 1	flight_2
SELECT T2.AirportCode FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode GROUP BY T2.AirportCode ORDER BY COUNT(T1.FlightNo) LIMIT 1	flight_2
SELECT AirportCode FROM airports GROUP BY AirportCode ORDER BY COUNT(*) LIMIT 1	flight_2
SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(Airline) DESC LIMIT 1	flight_2
SELECT T1.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.Airline GROUP BY T1.Airline ORDER BY COUNT(T1.FlightNo) DESC LIMIT 1	flight_2
SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid ORDER BY COUNT(T2.FlightNo) LIMIT 1	flight_2
SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid ORDER BY COUNT(T2.FlightNo) LIMIT 1	flight_2
SELECT DISTINCT T1.Airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Ahd'	flight_2
SELECT DISTINCT T1.Airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'AHD'	flight_2
SELECT T1.Airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Ahd'	flight_2
SELECT DISTINCT T1.Airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'AHD'	flight_2
SELECT DISTINCT T1.Airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'APG' INTERSECT SELECT DISTINCT T1.Airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'CVO'	flight_2
SELECT DISTINCT T1.Airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City IN ('APG', 'CVO')	flight_2
SELECT DISTINCT T2.Abbreviation FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid INNER JOIN airports AS T3 ON T1.DestAirport = T3.AirportCode WHERE T3.City = 'CVO' EXCEPT SELECT DISTINCT T2.Abbreviation FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid INNER JOIN airports AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T3.City = 'APG'	flight_2
SELECT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'CVO' EXCEPT SELECT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode	flight_2
SELECT DISTINCT Airline FROM flights GROUP BY Airline HAVING COUNT(Distinct DestAirport) >= 10	flight_2
SELECT DISTINCT T1.Abbreviation FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Abbreviation HAVING COUNT(T2.FlightNo) >= 10	flight_2
SELECT DISTINCT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.DestAirport GROUP BY T2.DestAirport HAVING COUNT(T2.Airline) < 200	flight_2
SELECT DISTINCT T2.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid GROUP BY T2.Airline HAVING COUNT(*) < 200	flight_2
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'	flight_2
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'	flight_2
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'	flight_2
SELECT DISTINCT FlightNo FROM flights WHERE SourceAirport = 'APG'	flight_2
SELECT DISTINCT FlightNo FROM flights WHERE DestAirport = 'APG'	flight_2
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'	flight_2
SELECT T1.FlightNo FROM flights AS T1 INNER JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'	flight_2
SELECT FlightNo FROM flights WHERE SourceAirport = 'ABZ'	flight_2
SELECT FlightNo FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')	flight_2
SELECT FlightNo FROM flights WHERE DestAirport = 'Aberdeen'	flight_2
SELECT COUNT(*) FROM flights f INNER JOIN airports a1 ON f.DestAirport = a1.AirportCode INNER JOIN airports a2 ON f.SourceAirport = a2.AirportCode WHERE a1.City = 'Aberdeen' OR a2.City = 'Abilene'	flight_2
SELECT COUNT(DISTINCT T1.SourceAirport) FROM flights AS T1 INNER JOIN airports AS T2 ON T2.AirportCode = T1.DestAirport WHERE T2.City IN ('Aberdeen', 'Abilene')	flight_2
SELECT DISTINCT T1.AirportName FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport EXCEPT SELECT DISTINCT T1.AirportName FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport	flight_2
SELECT City FROM airports WHERE AirportCode NOT IN ( SELECT DestAirport FROM flights UNION SELECT SourceAirport FROM flights )	flight_2
SELECT COUNT(Employee_ID) FROM employee	employee_hire_evaluation
SELECT COUNT(Employee_ID) FROM employee	employee_hire_evaluation
SELECT Name FROM employee ORDER BY Age ASC	employee_hire_evaluation
SELECT Name FROM employee ORDER BY Age ASC	employee_hire_evaluation
SELECT City , COUNT(Employee_ID) FROM employee GROUP BY City	employee_hire_evaluation
SELECT COUNT(*) ,  City FROM employee GROUP BY City	employee_hire_evaluation
SELECT DISTINCT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(DISTINCT Employee_ID) > 1	employee_hire_evaluation
SELECT DISTINCT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(DISTINCT Employee_ID) > 1	employee_hire_evaluation
SELECT COUNT(*) ,  LOCATION FROM shop GROUP BY LOCATION	employee_hire_evaluation
SELECT DISTINCT T2.Location, COUNT(*) FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Location	employee_hire_evaluation
SELECT Manager_name , District FROM shop WHERE Number_products = ( SELECT MAX(Number_products) FROM shop )	employee_hire_evaluation
SELECT T1.Manager_name, T1.District FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY Number_products DESC LIMIT 1	employee_hire_evaluation
SELECT MIN(Number_products) , MAX(Number_products) FROM shop	employee_hire_evaluation
SELECT MIN(Number_products), MAX(Number_products) FROM shop	employee_hire_evaluation
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC	employee_hire_evaluation
SELECT Shop_ID, Name, Location, District FROM shop ORDER BY Number_products DESC	employee_hire_evaluation
SELECT T2.Name FROM hiring AS T1 INNER JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID HAVING AVG(T2.Number_products) > (SELECT AVG(Number_products) FROM shop)	employee_hire_evaluation
SELECT DISTINCT T2.Name FROM hiring AS T1 INNER JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID HAVING AVG(T2.Number_products) > (SELECT AVG(Number_products) FROM shop)	employee_hire_evaluation
SELECT T1.Name FROM employee AS T1 INNER JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID INNER JOIN evaluation AS T3 ON T1.Employee_ID = T3.Employee_ID GROUP BY T1.Employee_ID ORDER BY COUNT(T3.Employee_ID) DESC LIMIT 1	employee_hire_evaluation
SELECT T1.Name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Name ORDER BY COUNT(T2.Employee_ID) DESC LIMIT 1	employee_hire_evaluation
SELECT Name FROM evaluation WHERE Bonus = ( SELECT MAX(Bonus) FROM evaluation )	employee_hire_evaluation
SELECT T1.Name FROM evaluation AS T1 INNER JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T1.Bonus DESC LIMIT 1	employee_hire_evaluation
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)	employee_hire_evaluation
SELECT DISTINCT Name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation )	employee_hire_evaluation
SELECT T2.Name FROM hiring AS T1 INNER JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(T1.Employee_ID) DESC LIMIT 1	employee_hire_evaluation
SELECT T2.Name FROM hiring AS T1 INNER JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(T1.Employee_ID) DESC LIMIT 1	employee_hire_evaluation
SELECT DISTINCT T2.Name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Employee_ID IS NULL	employee_hire_evaluation
SELECT T1.Name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Employee_ID IS NULL	employee_hire_evaluation
SELECT T2.Name, COUNT(DISTINCT T1.Employee_ID) FROM hiring AS T1 INNER JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Name	employee_hire_evaluation
SELECT Shop_ID , COUNT(DISTINCT Employee_ID) FROM hiring GROUP BY Shop_ID	employee_hire_evaluation
SELECT SUM(Bonus) FROM evaluation	employee_hire_evaluation
SELECT SUM(Bonus) FROM evaluation	employee_hire_evaluation
SELECT * FROM hiring	employee_hire_evaluation
SELECT * FROM hiring	employee_hire_evaluation
SELECT DISTINCT T1.District FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T1.Number_products < 3000 GROUP BY T1.District HAVING COUNT(T1.Shop_ID) > 1	employee_hire_evaluation
SELECT DISTINCT T1.District FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T1.Number_products < 3000 AND T1.Number_products > 10000	employee_hire_evaluation
SELECT COUNT(DISTINCT Location) FROM shop	employee_hire_evaluation
SELECT COUNT(DISTINCT Location) FROM shop	employee_hire_evaluation
SELECT COUNT(DISTINCT Document_ID) FROM Documents	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT Document_ID) FROM Documents	cre_Doc_Template_Mgt
SELECT Document_ID, Document_Name, Document_Description FROM Documents	cre_Doc_Template_Mgt
SELECT T1.Document_ID, T2.Document_Name, T2.Document_Description FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID	cre_Doc_Template_Mgt
SELECT T1.Document_Name, T2.Template_ID FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE Lower(T1.Document_Description) LIKE '%w%'	cre_Doc_Template_Mgt
SELECT T2.Document_Name, T1.Template_ID FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE Lower(T1.Document_Description) LIKE '%w%'	cre_Doc_Template_Mgt
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'	cre_Doc_Template_Mgt
SELECT T2.Document_ID, T1.Template_ID, T1.Template_Type_Description FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Robbin CV'	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT T2.Template_Type_Code) FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT T1.Template_ID) FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT T2.Document_ID) FROM Ref_Template_Types AS T1 INNER JOIN Documents AS T2 ON T1.Template_Type_Code = T2.Template_ID WHERE T1.Template_Type_Code = 'PPT '	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT T2.Document_ID) FROM Ref_Template_Types AS T1 INNER JOIN Documents AS T2 ON T2.Template_ID = T1.Template_Type_Code WHERE T1.Template_Type_Description = 'PPT'	cre_Doc_Template_Mgt
SELECT T1.Template_ID, COUNT(DISTINCT D.Document_ID) AS Num_Documents FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID	cre_Doc_Template_Mgt
SELECT T1.Template_ID, COUNT(DISTINCT T2.Document_ID) FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID	cre_Doc_Template_Mgt
SELECT T.Template_ID, RT.Template_Type_Code FROM Templates T JOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code GROUP BY T.Template_ID, RT.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT T1.Template_ID, T2.Template_Type_Code FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_ID ORDER BY COUNT(DISTINCT T3.Document_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT T1.Template_ID FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID HAVING COUNT(*) > 1	cre_Doc_Template_Mgt
SELECT T1.Template_ID FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID HAVING COUNT(DISTINCT T2.Document_ID) > 1	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN ( SELECT Template_ID FROM Documents )	cre_Doc_Template_Mgt
SELECT DISTINCT Template_ID FROM Templates WHERE Template_ID NOT IN ( SELECT Template_ID FROM Documents )	cre_Doc_Template_Mgt
SELECT COUNT(Template_ID) FROM Templates	cre_Doc_Template_Mgt
SELECT COUNT(Template_ID) FROM Templates	cre_Doc_Template_Mgt
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT DISTINCT Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')	cre_Doc_Template_Mgt
SELECT COUNT(T1.Template_ID) FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'CV'	cre_Doc_Template_Mgt
SELECT COUNT(T1.Template_ID) FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'CV'	cre_Doc_Template_Mgt
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5	cre_Doc_Template_Mgt
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5	cre_Doc_Template_Mgt
SELECT Template_Type_Code, COUNT(Template_ID) FROM Templates GROUP BY Template_Type_Code	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code, COUNT(*) FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3	cre_Doc_Template_Mgt
SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code	cre_Doc_Template_Mgt
SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code	cre_Doc_Template_Mgt
SELECT T2.Template_Type_Code FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Data base'	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 INNER JOIN Documents AS T2 ON T1.Template_Type_Code = T2.Template_ID WHERE T2.Document_Name = 'Data base'	cre_Doc_Template_Mgt
SELECT DISTINCT T2.Document_Name FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code = 'BK'	cre_Doc_Template_Mgt
SELECT T1.Document_Name FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'BK'	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code, COUNT(DISTINCT T2.Document_ID) FROM Ref_Template_Types AS T1 INNER JOIN Documents AS T2 ON T1.Template_Type_Code = T2.Template_ID GROUP BY T1.Template_Type_Code	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code, COUNT(DISTINCT T3.Document_ID) FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code INNER JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Code	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 INNER JOIN Documents AS T2 ON T1.Template_Type_Code = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(T2.Document_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(T2.Document_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN ( SELECT Template_ID FROM Documents )	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Template_Type_Code FROM Documents	cre_Doc_Template_Mgt
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types	cre_Doc_Template_Mgt
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types	cre_Doc_Template_Mgt
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'	cre_Doc_Template_Mgt
SELECT T2.Template_Type_Description FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_Type_Code = 'AD'	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'	cre_Doc_Template_Mgt
SELECT DISTINCT T2.Template_Type_Description FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID	cre_Doc_Template_Mgt
SELECT DISTINCT T2.Template_Type_Description FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID	cre_Doc_Template_Mgt
SELECT T.Template_ID FROM Templates T JOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code WHERE RT.Template_Type_Description = 'Presentation'	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_Type_Description = 'Presentation '	cre_Doc_Template_Mgt
SELECT COUNT(Paragraph_ID) FROM Paragraphs	cre_Doc_Template_Mgt
SELECT COUNT(T1.Paragraph_ID) FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID	cre_Doc_Template_Mgt
SELECT COUNT(T1.Paragraph_ID) FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show '	cre_Doc_Template_Mgt
SELECT COUNT(T1.Paragraph_ID) FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show '	cre_Doc_Template_Mgt
SELECT T2.Paragraph_Text FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Paragraph_Text = 'Korea '	cre_Doc_Template_Mgt
SELECT T2.Paragraph_Text FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text LIKE '%Korea%'	cre_Doc_Template_Mgt
SELECT T2.Paragraph_ID, T2.Paragraph_Text FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'Welcome to NY '	cre_Doc_Template_Mgt
SELECT T2.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T2 INNER JOIN Documents AS T1 ON T2.Document_ID = T1.Document_ID WHERE T1.Document_Name = 'Welcome to NY '	cre_Doc_Template_Mgt
SELECT T2.Paragraph_Text FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'Customer reviews'	cre_Doc_Template_Mgt
SELECT T2.Paragraph_Text FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'Customer reviews '	cre_Doc_Template_Mgt
SELECT Document_ID, COUNT(Paragraph_ID) FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID	cre_Doc_Template_Mgt
SELECT Document_ID, COUNT(Paragraph_ID) FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID	cre_Doc_Template_Mgt
SELECT Document_ID, Document_Name, COUNT(Paragraph_ID) FROM Paragraphs GROUP BY Document_ID	cre_Doc_Template_Mgt
SELECT T1.Document_ID, T2.Document_Name, COUNT(T3.Paragraph_ID) FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID INNER JOIN Paragraphs AS T3 ON T1.Document_ID = T3.Document_ID GROUP BY T1.Document_ID	cre_Doc_Template_Mgt
SELECT DISTINCT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) > 1	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2	cre_Doc_Template_Mgt
SELECT T2.Document_ID, T2.Document_Name FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY COUNT(T1.Paragraph_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT D.Document_ID, D.Document_Name FROM Documents D INNER JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY COUNT(P.Paragraph_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) LIMIT 1	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) LIMIT 1	cre_Doc_Template_Mgt
SELECT T2.Document_ID FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING COUNT(T1.Paragraph_ID) BETWEEN 1 AND 2	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text IN ('Brazil ', 'Ireland ')	cre_Doc_Template_Mgt
SELECT T1.Document_ID FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text LIKE '%Brazil %' AND T2.Paragraph_Text LIKE '%Ireland%'	cre_Doc_Template_Mgt
SELECT COUNT(Teacher_ID) FROM teacher	course_teach
SELECT COUNT(Teacher_ID) FROM teacher	course_teach
SELECT Name FROM teacher ORDER BY Age ASC	course_teach
SELECT T2.Name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID ORDER BY T2.Age ASC	course_teach
SELECT Age , Hometown FROM teacher	course_teach
SELECT Age, Hometown FROM teacher	course_teach
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.Hometown != 'Little Lever Urban District'	course_teach
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'	course_teach
SELECT T1.Name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Grade IN (32, 33)	course_teach
SELECT T1.Name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.Age = 32 OR T1.Age = 33	course_teach
SELECT T1.Hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID ORDER BY T1.Age LIMIT 1	course_teach
SELECT T2.Hometown FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID ORDER BY T2.Age LIMIT 1	course_teach
SELECT DISTINCT T2.Hometown, COUNT(*) FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Hometown	course_teach
SELECT COUNT(T2.Teacher_ID) FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Hometown	course_teach
SELECT T2.Hometown FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1	course_teach
SELECT T1.Hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Hometown ORDER BY COUNT(T1.Teacher_ID) DESC LIMIT 1	course_teach
SELECT T2.Hometown FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Hometown HAVING COUNT(T2.Hometown) > 1	course_teach
SELECT T2.Hometown FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Hometown HAVING COUNT(T2.Teacher_ID) >= 2	course_teach
SELECT T1.Name ,  T2.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID	course_teach
SELECT T1.Name, T2.Course FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID	course_teach
SELECT T1.Name ,  T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC	course_teach
SELECT T1.Name, T3.Course FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID INNER JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC	course_teach
SELECT T2.Name FROM course AS T1 INNER JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T1.Course = 'Math'	course_teach
SELECT T2.Name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.Course = 'Math'	course_teach
SELECT T1.Name ,  COUNT(*) FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name	course_teach
SELECT T1.Name, COUNT(DISTINCT T2.Course_ID) FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name	course_teach
SELECT T2.Name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING COUNT(*) >= 2	course_teach
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name HAVING COUNT(*) >= 2	course_teach
SELECT T1.Name FROM teacher AS T1 LEFT JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Course_ID IS NULL	course_teach
SELECT T.Name FROM teacher T WHERE T.Teacher_ID NOT IN ( SELECT T2.Teacher_ID FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID )	course_teach
SELECT COUNT(*) FROM visitor WHERE Age < 30	museum_visit
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC	museum_visit
SELECT AVG(T2.Age) FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T1.Level_of_membership <= 4	museum_visit
SELECT T1.Name, T2.Level_of_membership FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T1.Level_of_membership > 4 ORDER BY T1.Age	museum_visit
SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1	museum_visit
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009	museum_visit
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'	museum_visit
SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010 )	museum_visit
SELECT T2.ID, T1.Name, T2.Age FROM visit AS T1 INNER JOIN visitor AS T2 ON T1.visitor_ID = T2.ID GROUP BY T1.Museum_ID HAVING COUNT(DISTINCT T1.visitor_ID) > 1	museum_visit
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID ORDER BY SUM(visit.Total_spent) DESC LIMIT 1	museum_visit
SELECT T2.Museum_ID, T1.Name FROM visit AS T1 INNER JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T1.Museum_ID ORDER BY COUNT(T1.Museum_ID) DESC LIMIT 1	museum_visit
SELECT Name FROM museum WHERE Museum_ID NOT IN ( SELECT Museum_ID FROM visit )	museum_visit
SELECT T1.Name, T2.Age FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC LIMIT 1	museum_visit
SELECT AVG(Num_of_Ticket) ,  MAX(Num_of_Ticket) FROM visit	museum_visit
SELECT SUM(T2.Total_spent) FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T1.Level_of_membership = 1	museum_visit
SELECT T2.Name FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID INNER JOIN museum AS T3 ON T1.Museum_ID = T3.Museum_ID WHERE STRFTIME('%Y',T1.Open_Year) < 2009 AND STRFTIME('%Y',T3.Open_Year) > 2011	museum_visit
SELECT COUNT(DISTINCT v.ID) FROM visitor v LEFT JOIN visit v2 ON v.ID = v2.visitor_ID WHERE v2.Museum_ID NOT IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010)	museum_visit
SELECT COUNT(Museum_ID) FROM museum WHERE Open_Year BETWEEN '2008' AND '2013'	museum_visit
SELECT COUNT(player_id) FROM players	wta_1
SELECT COUNT(player_id) FROM players	wta_1
SELECT COUNT(*) FROM matches	wta_1
SELECT COUNT(*) FROM matches	wta_1
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'	wta_1
SELECT DISTINCT first_name, birth_date FROM players WHERE country_code = 'USA'	wta_1
SELECT AVG(CASE WHEN winner_id IN (SELECT player_id FROM players WHERE hand = 'left') THEN winner_age ELSE loser_age END) AS average_age	wta_1
SELECT AVG(T1.loser_age) AS loser_average, AVG(T2.winner_age) AS winner_average FROM matches T1 INNER JOIN players T2 ON T1.loser_id = T2.player_id	wta_1
SELECT AVG(r) FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id WHERE T1.ranking_date = ( SELECT MAX(rating_date) FROM rankings )	wta_1
SELECT AVG(T2.ranking) FROM matches AS T1 INNER JOIN rankings AS T2 ON T1.winner_id = T2.player_id	wta_1
SELECT MAX(t1.ranking) FROM rankings AS t1 JOIN matches AS t2 ON t1.player_id = t2.loser_id	wta_1
SELECT MAX(T1.ranking) FROM rankings AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.loser_id	wta_1
SELECT COUNT(DISTINCT country_code) FROM players	wta_1
SELECT COUNT(DISTINCT country_code) FROM players	wta_1
SELECT COUNT(DISTINCT loser_name) FROM matches	wta_1
SELECT COUNT(DISTINCT loser_name) FROM matches	wta_1
SELECT DISTINCT tourney_name FROM matches GROUP BY tourney_id HAVING COUNT(match_num) > 10	wta_1
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10	wta_1
SELECT DISTINCT T1.winner_name FROM matches AS T1 INNER JOIN rankings AS T2 ON T1.winner_id = T2.player_id WHERE T2.ranking_date BETWEEN '2013-01-01' AND '2013-12-31' OR T2.ranking_date BETWEEN '2016-01-01' AND '2016-12-31'	wta_1
SELECT DISTINCT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year IN (2013, 2016)	wta_1
SELECT COUNT(*) FROM matches WHERE YEAR BETWEEN '2013' AND '2016'	wta_1
SELECT COUNT(match_num) FROM matches WHERE YEAR(`tourney_date`) IN (2013, 2016)	wta_1
SELECT T1.country_code ,  T2.first_name FROM players AS T1 INNER JOIN matches AS T2 ON T2.winner_id = T1.player_id WHERE T2.tourney_id IN ('WTA Championships', 'Australian Open')	wta_1
SELECT T1.first_name, T2.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' AND T2.match_num = 1	wta_1
SELECT first_name , country_code FROM players WHERE birth_date = ( SELECT MAX(birth_date) FROM players )	wta_1
SELECT first_name, country_code FROM players ORDER BY age DESC LIMIT 1	wta_1
SELECT first_name , last_name FROM players ORDER BY birth_date	wta_1
SELECT first_name, last_name FROM players ORDER BY birth_date	wta_1
SELECT first_name ,  last_name FROM players WHERE hand = 'L' ORDER BY birth_date	wta_1
SELECT first_name, last_name FROM players WHERE hand = 'Left' ORDER BY birth_date	wta_1
SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY COUNT(T2.tours) DESC LIMIT 1	wta_1
SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY COUNT(T2.tours) DESC LIMIT 1	wta_1
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1	wta_1
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1	wta_1
SELECT T1.winner_name , T1.winner_rank_points FROM rankings AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T2.winner_id ORDER BY COUNT(*) DESC LIMIT 1	wta_1
SELECT T1.winner_name, T2.ranking_points FROM rankings AS T2 JOIN matches AS T1 ON T2.player_id = T1.winner_id GROUP BY T2.player_id ORDER BY COUNT(T1.match_num) DESC LIMIT 1	wta_1
SELECT T2.winner_name FROM matches AS T1 INNER JOIN rankings AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = 'Australian Open' ORDER BY T2.ranking_points DESC LIMIT 1	wta_1
SELECT T3.winner_name FROM matches AS T1 INNER JOIN rankings AS T2 ON T1.winner_id = T2.player_id INNER JOIN players AS T3 ON T2.player_id = T3.player_id WHERE T1.tourney_name = 'Australian Open' ORDER BY T2.ranking_points DESC LIMIT 1	wta_1
SELECT T1.loser_name ,  T2.winner_name FROM matches AS T1 JOIN players AS T2 ON T1.loser_id = T2.player_id ORDER BY T1.minutes DESC LIMIT 1	wta_1
SELECT T1.winner_name, T2.loser_name FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id ORDER BY T1.minutes DESC LIMIT 1	wta_1
SELECT AVG(r.ranking), first_name FROM rankings r JOIN players ON r.player_id = players.player_id GROUP BY first_name	wta_1
SELECT T1.first_name, AVG(T2.ranking_points) FROM players AS T1 LEFT JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name	wta_1
SELECT T1.first_name ,  sum(T2.ranking_points) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name	wta_1
SELECT T1.first_name, SUM(T2.ranking_points) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id	wta_1
SELECT COUNT(*) , country_code FROM players GROUP BY country_code	wta_1
SELECT COUNT(*) ,  country_code FROM players GROUP BY country_code	wta_1
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1	wta_1
SELECT COUNT(DISTINCT country_code) FROM players GROUP BY country_code ORDER BY COUNT(DISTINCT country_code) DESC LIMIT 1	wta_1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50	wta_1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50	wta_1
SELECT COUNT(tours) FROM rankings GROUP BY ranking_date	wta_1
SELECT COUNT(tours) FROM rankings GROUP BY ranking_date	wta_1
SELECT COUNT(year) ,  YEAR FROM matches GROUP BY YEAR	wta_1
SELECT YEAR, COUNT(*) FROM matches GROUP BY YEAR	wta_1
SELECT T1.first_name, T1.last_name, T2.ranking FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.ranking_date LIMIT 3	wta_1
SELECT T2.winner_name, T2.winner_rank FROM rankings AS T1 INNER JOIN players AS T2 ON T1.player_id = T2.player_id ORDER BY T2.winner_age ASC LIMIT 3	wta_1
SELECT COUNT(DISTINCT winner_name) FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T2.hand = 'Left-handed' AND tourney_name = 'WTA Championships'	wta_1
SELECT COUNT(*) FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T2.hand = 'left-handed' AND T1.tourney_name = 'WTA Championships'	wta_1
SELECT T1.first_name, T2.country_code, T1.birth_date FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.ranking_points DESC LIMIT 1	wta_1
SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.ranking_points DESC LIMIT 1	wta_1
SELECT COUNT(*) ,  hand FROM players GROUP BY hand	wta_1
SELECT COUNT(*) ,  hand FROM players GROUP BY hand	wta_1
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'	battle_death
SELECT ship.name, ship.tonnage FROM ship ORDER BY ship.name DESC	battle_death
SELECT T1.name, T1.date, T1.result FROM battle AS T1	battle_death
SELECT MAX(killed) ,  MIN(killed) FROM death	battle_death
SELECT AVG(injured) FROM death	battle_death
SELECT T1.note, T1.killed FROM death AS T1 INNER JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'	battle_death
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'	battle_death
SELECT DISTINCT T1.id ,  T2.name FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'	battle_death
SELECT T1.id, T1.name FROM battle AS T1 INNER JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T2.caused_by_ship_id HAVING SUM(T2.killed + T2.injured) > 10	battle_death
SELECT T2.id ,  T2.name FROM death AS T1 INNER JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id GROUP BY T1.caused_by_ship_id ORDER BY SUM(T1.injured) DESC LIMIT 1	battle_death
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan ' AND latin_commander = 'Baldwin I '	battle_death
SELECT COUNT(DISTINCT result) FROM battle	battle_death
SELECT COUNT(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225 ' )	battle_death
SELECT T1.name, T1.date FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name IN ('Lettice ', 'HMS Atalanta ')	battle_death
SELECT T2.name, T1.result, T2.bulgarian_commander FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel' AND T2.disposition_of_ship != ''	battle_death
SELECT note FROM death WHERE note LIKE '%East%'	battle_death
SELECT T1.line_1, T1.line_2 FROM Addresses AS T1	student_transcripts_tracking
SELECT line_1, line_2 FROM Addresses ORDER BY address_id LIMIT 1 UNION SELECT line_1, line_2 FROM Addresses ORDER BY address_id LIMIT 1 OFFSET 1	student_transcripts_tracking
SELECT COUNT(course_id) FROM Courses	student_transcripts_tracking
SELECT COUNT(course_id) FROM Courses	student_transcripts_tracking
SELECT T1.course_description FROM Courses AS T1 INNER JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'math'	student_transcripts_tracking
SELECT T2.course_description FROM Courses AS T1 INNER JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name LIKE '%math%'	student_transcripts_tracking
SELECT T1.zip_postcode FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T2.first_name = 'Port' AND T1.city = 'Chelsea'	student_transcripts_tracking
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'	student_transcripts_tracking
SELECT D.department_name ,  D.department_id FROM Departments AS D JOIN Degree_Programs AS DP ON D.department_id = DP.department_id GROUP BY D.department_id ORDER BY COUNT(DP.degree_program_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.department_name, T1.department_id FROM Departments AS T1 INNER JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(T2.degree_program_id) DESC LIMIT 1	student_transcripts_tracking
SELECT COUNT(DISTINCT T2.department_id) FROM Degree_Programs AS T1 INNER JOIN Departments AS T2 ON T1.department_id = T2.department_id	student_transcripts_tracking
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(DISTINCT T1.degree_summary_name) FROM Degree_Programs AS T1	student_transcripts_tracking
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(*) FROM Degree_Programs WHERE degree_program_id IN ( SELECT degree_program_id FROM Departments WHERE department_name = 'Engineering' )	student_transcripts_tracking
SELECT COUNT(DISTINCT T1.department_id) FROM Degree_Programs AS T1 INNER JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Engineering'	student_transcripts_tracking
SELECT T2.section_name, T2.section_description FROM Sections AS T1 INNER JOIN Courses AS T2 ON T1.course_id = T2.course_id	student_transcripts_tracking
SELECT T2.section_name, T2.section_description FROM Sections AS T2 JOIN Courses AS T1 ON T2.course_id = T1.course_id	student_transcripts_tracking
SELECT course_id, course_name FROM Courses WHERE COUNT(DISTINCT section_id) <= 2	student_transcripts_tracking
SELECT T1.course_name, T1.course_id FROM Courses AS T1 INNER JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(T2.section_id) < 2	student_transcripts_tracking
SELECT section_name FROM Sections ORDER BY section_name DESC	student_transcripts_tracking
SELECT section_name FROM Sections ORDER BY section_name DESC	student_transcripts_tracking
SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.semester_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.department_description FROM Departments AS T1 INNER JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T2.degree_summary_name LIKE '%Computer%'	student_transcripts_tracking
SELECT T2.department_description FROM Courses AS T1 INNER JOIN Departments AS T2 ON T1.course_id = T2.department_id WHERE T1.course_name LIKE '%computer%'	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name, T2.degree_program_id FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(DISTINCT T2.degree_program_id) = 2	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name, T2.student_id FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING COUNT(T2.degree_program_id) = 2	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'	student_transcripts_tracking
SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelors'	student_transcripts_tracking
SELECT T1.degree_program_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_program_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T2.degree_summary_name FROM Student_Enrolment AS T1 INNER JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_summary_name ORDER BY COUNT(T2.degree_summary_name) DESC LIMIT 1	student_transcripts_tracking
SELECT T2.degree_program_id, T2.degree_summary_name FROM Student_Enrolment AS T1 INNER JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_program_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T3.degree_program_id, T3.degree_summary_name FROM Student_Enrolment AS T1 INNER JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id INNER JOIN Courses AS T3 ON T1.course_id = T3.course_id GROUP BY T3.course_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T2.student_enrolment_id) AS enrollments FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY enrollments DESC LIMIT 1	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name ,  T2.student_id ,  COUNT(*) FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.semester_name FROM Semesters AS T1 LEFT JOIN Student_Enrolment_Courses AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_enrolment_id IS NULL	student_transcripts_tracking
SELECT T1.semester_name FROM Semesters AS T1 INNER JOIN ( SELECT T2.semester_id FROM Student_Enrolment AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id ) AS T3 ON T1.semester_id = T3.semester_id WHERE T3.semester_id IS NULL	student_transcripts_tracking
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id	student_transcripts_tracking
SELECT DISTINCT T3.course_name FROM Student_Enrolment_Courses AS T1 INNER JOIN Courses AS T2 ON T1.course_id = T2.course_id INNER JOIN Student_Enrolment AS T3 ON T1.student_enrolment_id = T3.student_enrolment_id	student_transcripts_tracking
SELECT T2.course_name FROM Student_Enrolment_Courses AS T1 INNER JOIN Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_name ORDER BY COUNT(T1.student_enrolment_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T2.course_name FROM Student_Enrolment_Courses AS T1 INNER JOIN Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1	student_transcripts_tracking
SELECT DISTINCT T1.last_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND T1.student_id NOT IN ( SELECT T3.student_id FROM Student_Enrolment AS T4 INNER JOIN Degree_Programs AS T5 ON T4.degree_program_id = T5.degree_program_id )	student_transcripts_tracking
SELECT T2.last_name FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id WHERE T1.state_province_county = 'North Carolina' AND T2.student_id NOT IN ( SELECT student_id FROM Student_Enrolment )	student_transcripts_tracking
SELECT T1.transcript_date, T2.student_course_id FROM Transcripts AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.student_course_id HAVING COUNT(DISTINCT T2.course_id) >= 2	student_transcripts_tracking
SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 INNER JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(T2.student_course_id) >= 2	student_transcripts_tracking
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'	student_transcripts_tracking
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 ORDER BY date_first_registered LIMIT 1	student_transcripts_tracking
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN Degrees_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id ORDER BY T2.semester_id, T2.transcript_date LIMIT 1	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 ORDER BY date_first_registered LIMIT 1	student_transcripts_tracking
SELECT DISTINCT T1.first_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T1.current_address_id != T2.address_id	student_transcripts_tracking
SELECT T1.first_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.address_id != T1.permanent_address_id	student_transcripts_tracking
SELECT T2.address_id, T2.line_1, T2.line_2, T2.line_3 FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id GROUP BY T2.address_id ORDER BY COUNT(T2.address_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T.address_id, T.line_1, T.line_2 FROM Addresses AS T WHERE T.address_id = ( SELECT T2.current_address_id FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY COUNT(*) DESC LIMIT 1 )	student_transcripts_tracking
SELECT AVG(transcript_date) FROM Transcripts	student_transcripts_tracking
SELECT AVG(transcript_date) FROM Transcripts	student_transcripts_tracking
SELECT T1.transcript_date, T1.other_details FROM Transcripts AS T1 INNER JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id WHERE T2.student_course_id IN ( SELECT student_course_id FROM Student_Enrolment_Courses ) ORDER BY transcript_date LIMIT 1	student_transcripts_tracking
SELECT T1.transcript_date, T3.degree_summary_name, T4.department_name FROM Transcripts AS T1 INNER JOIN Student_Enrolment_Courses AS T2 ON T1.transcript_id = T2.student_course_id INNER JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id INNER JOIN Departments AS T4 ON T3.department_id = T4.department_id ORDER BY T1.transcript_date LIMIT 1	student_transcripts_tracking
SELECT COUNT(transcript_id) FROM Transcripts	student_transcripts_tracking
SELECT COUNT(*) FROM Transcripts	student_transcripts_tracking
SELECT MAX(transcript_date) FROM Transcripts	student_transcripts_tracking
SELECT MAX(transcript_date) FROM Transcripts	student_transcripts_tracking
SELECT COUNT(DISTINCT T1.student_course_id) ,  T2.student_enrolment_id FROM Student_Enrolment_Courses AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.student_enrolment_id	student_transcripts_tracking
SELECT MAX(CASE WHEN T2.transcript_id IN ( SELECT transcript_id FROM Transcript_Contents GROUP BY student_course_id ) THEN 1 ELSE 0 END) , T2.student_enrolment_id FROM Student_Enrolment_Courses AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id	student_transcripts_tracking
SELECT T1.transcript_date FROM Transcripts AS T1 INNER JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(T2.student_course_id) LIMIT 1	student_transcripts_tracking
SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 INNER JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(T2.student_course_id) LIMIT 1	student_transcripts_tracking
SELECT T1.semester_name FROM Semesters AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id INNER JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name IN ('Master', 'Bachelor')	student_transcripts_tracking
SELECT DISTINCT T1.semester_id FROM Semesters AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id INNER JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY T1.semester_id	student_transcripts_tracking
SELECT COUNT(DISTINCT T1.address_id) FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.current_address_id	student_transcripts_tracking
SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.current_address_id	student_transcripts_tracking
SELECT first_name, middle_name, last_name FROM Students ORDER BY last_name, first_name DESC	student_transcripts_tracking
SELECT DISTINCT other_student_details FROM Students ORDER BY other_student_details ASC	student_transcripts_tracking
SELECT T1.section_description FROM Sections AS T1 INNER JOIN Courses AS T2 ON T1.course_id = T2.course_id WHERE T1.section_name = 'h'	student_transcripts_tracking
SELECT T1.section_description FROM Sections AS T1 INNER JOIN Courses AS T2 ON T1.course_id = T2.course_id WHERE T1.section_name = 'h'	student_transcripts_tracking
SELECT DISTINCT T1.first_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582'	student_transcripts_tracking
SELECT T1.first_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582'	student_transcripts_tracking
SELECT Title FROM Cartoon ORDER BY Title	tvshow
SELECT Title FROM Cartoon ORDER BY Title	tvshow
SELECT T2.Title FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Directed_by = 'Ben Jones'	tvshow
SELECT T2.Title FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Directed_by = 'Ben Jones'	tvshow
SELECT COUNT(T1.id) FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Written_by = 'Joseph Kuhr'	tvshow
SELECT COUNT(T1.id) FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE Written_by = 'Joseph Kuhr'	tvshow
SELECT T1.Title, T2.Directed_by FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id ORDER BY T1.Original_air_date	tvshow
SELECT T1.Title, T1.Directed_by FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id ORDER BY T2.Air_Date	tvshow
SELECT T2.Title FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Directed_by IN ('Ben Jones', 'Brandon Vietti')	tvshow
SELECT T2.Title FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Directed_by IN ('Ben Jones', 'Brandon Vietti')	tvshow
SELECT Country ,  COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1	tvshow
SELECT Country , COUNT(id) FROM TV_Channel GROUP BY Country ORDER BY COUNT(id) DESC LIMIT 1	tvshow
SELECT COUNT(DISTINCT series_name) ,  COUNT(DISTINCT Content) FROM TV_Channel	tvshow
SELECT COUNT(DISTINCT series_name) ,  COUNT(DISTINCT Content) FROM TV_Channel	tvshow
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'	tvshow
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'	tvshow
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'	tvshow
SELECT T2.Package_Option FROM TV_series AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.series_name = 'Sky Radio'	tvshow
SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'	tvshow
SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'	tvshow
SELECT Language , COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) ASC LIMIT 1	tvshow
SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language ORDER BY COUNT(id) LIMIT 1	tvshow
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language	tvshow
SELECT COUNT(T2.id) FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id GROUP BY T1.Language	tvshow
SELECT T2.series_name FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Title = 'The Rise of the Blue Beetle !'	tvshow
SELECT T3.series_name FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id INNER JOIN TV_series AS T3 ON T2.id = T3.Channel WHERE T1.Title = 'The Rise of the Blue Beetle'	tvshow
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.Package_Option = 'Sky Radio'	tvshow
SELECT T1.Title FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Series_name = 'Sky Radio'	tvshow
SELECT T2.Episode FROM TV_series AS T1 INNER JOIN Cartoon AS T2 ON T1.Channel = T2.Channel ORDER BY T1.Rating DESC	tvshow
SELECT T2.Episode FROM TV_series AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id ORDER BY T1.Rating	tvshow
SELECT T2.Episode, T1.Rating FROM TV_series AS T1 INNER JOIN TV_Channel AS T2 ON T2.id = T1.Channel ORDER BY T1.Rating DESC LIMIT 3	tvshow
SELECT T1.Episode, T1.Rating FROM TV_series AS T1 ORDER BY Rating DESC LIMIT 3	tvshow
SELECT MIN(Share), MAX(Share) FROM TV_series	tvshow
SELECT MAX(Share), MIN(Share) FROM TV_series	tvshow
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'	tvshow
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'	tvshow
SELECT T1.Weekly_Rank FROM TV_series AS T1 INNER JOIN Cartoon AS T2 ON T2.Channel = T1.Channel WHERE T2.Title = 'A Love of a Lifetime'	tvshow
SELECT T1.Weekly_Rank FROM TV_series AS T1 INNER JOIN Cartoon AS T2 ON T1.Channel = T2.Channel WHERE T2.Title = 'A Love of a Lifetime'	tvshow
SELECT T1.Series_name, T2.Channel FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'	tvshow
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'	tvshow
SELECT T1.Episode FROM TV_series AS T1 INNER JOIN Cartoon AS T2 ON T1.Channel = T2.Channel WHERE T2.Title LIKE '%Sky Radio%'	tvshow
SELECT Episode FROM TV_series WHERE Channel = 'Sky Radio'	tvshow
SELECT COUNT(T2.id) ,  T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id GROUP BY T1.Directed_by	tvshow
SELECT COUNT(T2.id) , T1.Directed_by FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id GROUP BY T1.Directed_by	tvshow
SELECT T2.production_code, T1.Channel FROM Cartoon AS T2 JOIN TV_Channel AS T1 ON T2.Channel = T1.id ORDER BY T2.`Original air date` DESC LIMIT 1	tvshow
SELECT T1.Title, T2.Channel FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id ORDER BY T1.Original_air_date DESC LIMIT 1	tvshow
SELECT Package_Option ,  series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes'	tvshow
SELECT Package_Option ,  series_name FROM TV_Channel WHERE Hight_definition_TV = 1	tvshow
SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'	tvshow
SELECT T1.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'	tvshow
SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by != 'Todd Casey'	tvshow
SELECT T1.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by != 'Todd Casey'	tvshow
SELECT T1.series_name, T2.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T2.Channel = T1.id WHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang')	tvshow
SELECT T1.Series_name, T1.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Michael Chang'	tvshow
SELECT Pixel_aspect_ratio_PAR ,  Country FROM TV_Channel WHERE Language != 'English'	tvshow
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'	tvshow
SELECT T2.id FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T1.Country HAVING COUNT(*) > 2	tvshow
SELECT T1.id FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T1.id HAVING COUNT(T2.id) > 2	tvshow
SELECT T.id FROM TV_Channel AS T WHERE T.Channel NOT IN ( SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' )	tvshow
SELECT id FROM TV_Channel WHERE Channel NOT IN ( SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' )	tvshow
SELECT Package_Option FROM TV_Channel WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' )	tvshow
SELECT T1.Package_Option FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel AND T2.Directed_by = 'Ben Jones' WHERE T2.Directed_by IS NULL	tvshow
SELECT COUNT(Poker_Player_ID) FROM poker_player	poker_player
SELECT COUNT(*) FROM poker_player	poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC	poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC	poker_player
SELECT Final_Table_Made , Best_Finish FROM poker_player	poker_player
SELECT Final_Table_Made , Best_Finish FROM poker_player	poker_player
SELECT AVG(Earnings) FROM poker_player	poker_player
SELECT AVG(Earnings) FROM poker_player	poker_player
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1	poker_player
SELECT MAX(Money_Rank) FROM poker_player	poker_player
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000	poker_player
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000	poker_player
SELECT T1.Name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID	poker_player
SELECT T1.Name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID	poker_player
SELECT T1.Name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000	poker_player
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000	poker_player
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID GROUP BY T1.People_ID ORDER BY COUNT(T1.Final_Table_Made) ASC	poker_player
SELECT Birth_Date FROM people AS p JOIN poker_player AS pr ON p.People_ID = pr.People_ID ORDER BY Earnings LIMIT 1	poker_player
SELECT Birth_Date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings LIMIT 1	poker_player
SELECT Money_Rank FROM poker_player WHERE People_ID = ( SELECT People_ID FROM people ORDER BY Height DESC LIMIT 1 )	poker_player
SELECT T1.Money_Rank FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1	poker_player
SELECT AVG(Earnings) FROM poker_player WHERE Height > 200	poker_player
SELECT AVG(Earnings) FROM poker_player WHERE Height > 200	poker_player
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY Earnings DESC	poker_player
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality	poker_player
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality	poker_player
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1	poker_player
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(People_ID) DESC LIMIT 1	poker_player
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) > 1	poker_player
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2	poker_player
SELECT Name, Birth_Date FROM people ORDER BY Name ASC	poker_player
SELECT T1.Name, T2.Birth_Date FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Name	poker_player
SELECT Name FROM people WHERE Nationality != 'Russia'	poker_player
SELECT Name FROM people WHERE Nationality != 'Russia'	poker_player
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)	poker_player
SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )	poker_player
SELECT COUNT(DISTINCT Nationality) FROM people	poker_player
SELECT COUNT(DISTINCT Nationality) FROM people	poker_player
SELECT COUNT(state) FROM AREA_CODE_STATE	voter_1
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC	voter_1
SELECT DISTINCT vote_id, phone_number, state FROM VOTES	voter_1
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE	voter_1
SELECT MAX(created) FROM VOTES WHERE state = 'CA'	voter_1
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway '	voter_1
SELECT DISTINCT state, created FROM VOTES	voter_1
SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 INNER JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING COUNT(T2.vote_id) >= 2	voter_1
SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 INNER JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.contestant_number ORDER BY COUNT(T2.vote_id) ASC LIMIT 1	voter_1
SELECT COUNT(T2.vote_id) FROM CONTESTANTS AS T1 INNER JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.state IN ('NY', 'CA')	voter_1
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN ( SELECT contestant_number FROM VOTES )	voter_1
SELECT T1.area_code FROM AREA_CODE_STATE AS T1 INNER JOIN VOTES AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY COUNT(T2.vote_id) DESC LIMIT 1	voter_1
SELECT created, state, phone_number FROM VOTES WHERE contestant_name = 'Tabatha Gehling'	voter_1
SELECT T1.area_code FROM AREA_CODE_STATE AS T1 INNER JOIN VOTES AS T2 ON T1.state = T2.state WHERE T2.contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling' OR contestant_name = 'Kelly Clauss')	voter_1
SELECT T2.contestant_name FROM VOTES AS T1 INNER JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name LIKE '%Al%'	voter_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear > 1950	world_1
SELECT T2.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear > 1950	world_1
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'	world_1
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'	world_1
SELECT SUM(T1.SurfaceArea) FROM country AS T1 INNER JOIN countryregion AS T2 ON T1.Code = T2.CountryCode WHERE T2.Region = 'Caribbean'	world_1
SELECT SUM(T2.SurfaceArea) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name LIKE '%Caribbean%' OR T1.Region LIKE '%Caribbean%'	world_1
SELECT T2.Continent FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Anguilla'	world_1
SELECT T2.Continent FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Anguilla'	world_1
SELECT T1.Region FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul'	world_1
SELECT T2.Region FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Kabul'	world_1
SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY T2.Percentage DESC LIMIT 1	world_1
SELECT T1.Language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.CountryCode = 'AW' AND T1.IsOfficial = 1 ORDER BY T1.Percentage DESC LIMIT 1	world_1
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'	world_1
SELECT Population, LifeExpectancy FROM country WHERE Code = 'BR'	world_1
SELECT Region, Population FROM country WHERE Code = 'AO'	world_1
SELECT T1.Region, T2.Population FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Angola'	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central'	world_1
SELECT T2.Name FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.CountryCode IN ( SELECT CountryCode FROM countrylanguage WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1 )	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' AND T2.Language = 'English' ORDER BY T1.LifeExpectancy LIMIT 1	world_1
SELECT SUM(T1.Population), MAX(T3.GNP) FROM country AS T2 INNER JOIN countrylanguage AS T1 ON T2.Code = T1.CountryCode INNER JOIN country AS T3 ON T1.CountryCode = T3.Code WHERE T2.Continent = 'Asia'	world_1
SELECT SUM(Population), MAX(GNP) FROM country WHERE Region = 'Asia'	world_1
SELECT AVG(T1.LifeExpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Africa' AND T1.GovernmentForm = 'Republic'	world_1
SELECT AVG(T1.LifeExpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Region = 'Africa' AND T1.GovernmentForm = 'Republic'	world_1
SELECT SUM(T1.SurfaceArea) FROM country AS T1 INNER JOIN continent AS T2 ON T1.Continent = T2.Name WHERE T2.Name IN ('Asia', 'Europe')	world_1
SELECT SUM(T1.SurfaceArea) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent IN ('Asia', 'Europe')	world_1
SELECT Population FROM city WHERE District = 'Gelderland'	world_1
SELECT SUM(T1.Population) FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = 'Gelderland'	world_1
SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US Territory'	world_1
SELECT AVG(GNP) ,  SUM(Population) FROM country WHERE Code = 'US'	world_1
SELECT COUNT(DISTINCT Language) FROM countrylanguage	world_1
SELECT COUNT(DISTINCT Language) FROM countrylanguage	world_1
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Region = 'Africa'	world_1
SELECT COUNT(DISTINCT T2.GovernmentForm) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Africa'	world_1
SELECT COUNT(DISTINCT CASE WHEN T2.Percentage IS NOT NULL THEN T1.Name END) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'	world_1
SELECT COUNT(DISTINCT T1.Language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba'	world_1
SELECT COUNT(T2.Language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND T2.IsOfficial = 1	world_1
SELECT COUNT(T2.Language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND T2.IsOfficial = 1	world_1
SELECT T2.Name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Code ORDER BY COUNT(T1.Language) DESC LIMIT 1	world_1
SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T1.Language ORDER BY SUM(T1.IsOfficial) DESC LIMIT 1	world_1
SELECT T2.Continent FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Continent ORDER BY COUNT(T1.Language) DESC LIMIT 1	world_1
SELECT T2.Continent FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Continent ORDER BY COUNT(T1.Language) DESC LIMIT 1	world_1
SELECT COUNT(DISTINCT T2.CountryCode) FROM countrylanguage AS T1 INNER JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Language = 'English' AND T2.Language = 'Dutch'	world_1
SELECT COUNT(DISTINCT T1.CountryCode) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'Dutch')	world_1
SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' AND T1.Percentage > 0 INTERSECT SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'French' AND T1.Percentage > 0	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'French') GROUP BY T1.Name	world_1
SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language IN ('English', 'French') AND T1.IsOfficial = 1 GROUP BY T2.Name	world_1
SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language IN ('English', 'French')	world_1
SELECT COUNT(DISTINCT T2.Continent) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Chinese'	world_1
SELECT COUNT(DISTINCT T3.Continent) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN countrylanguage AS T3 ON T2.CountryCode = T3.CountryCode WHERE T2.Language = 'Chinese'	world_1
SELECT T2.Region FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language IN ('English', 'Dutch')	world_1
SELECT T1.Region FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('Dutch', 'English')	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'Dutch')	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'Dutch')	world_1
SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' ORDER BY T2.Percentage DESC LIMIT 1	world_1
SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT(T2.CountryCode) DESC LIMIT 1	world_1
SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic' GROUP BY T2.Language HAVING COUNT(T2.CountryCode) = 1	world_1
SELECT T1.Language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = 'republic' GROUP BY T1.Language HAVING COUNT(T1.CountryCode) = 1	world_1
SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN city AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Language = 'English' ORDER BY T2.Population DESC LIMIT 1	world_1
SELECT T1.Name FROM country AS T2 INNER JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode INNER JOIN city AS T1 ON T1.CountryCode = T2.Code WHERE T3.Language = 'English' ORDER BY T1.Population DESC LIMIT 1	world_1
SELECT T1.Name, T2.Population, T2.LifeExpectancy FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' ORDER BY T1.SurfaceArea DESC LIMIT 1	world_1
SELECT T1.Name, T2.Population, T2.LifeExpectancy FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' ORDER BY T1.SurfaceArea DESC LIMIT 1	world_1
SELECT AVG(T1.LifeExpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'English'	world_1
SELECT AVG(T3.LifeExpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 0	world_1
SELECT SUM(c.Population) FROM country AS c LEFT JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English'	world_1
SELECT SUM(c.Population) FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English'	world_1
SELECT t2.Language FROM country AS t1 INNER JOIN countrylanguage AS t2 ON t1.Code = t2.CountryCode WHERE t1.HeadOfState = 'Beatrix'	world_1
SELECT T3.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN ( SELECT Code FROM country WHERE HeadOfState = 'Beatrix' ) AS T3 ON T1.Code = T3.Code	world_1
SELECT COUNT(DISTINCT T1.Language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.IndepYear < 1930	world_1
SELECT COUNT(T1.Language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.IndepYear < 1930 GROUP BY T2.Code	world_1
SELECT DISTINCT T2.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.SurfaceArea > ( SELECT MAX(T3.SurfaceArea) FROM country AS T3 INNER JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.Language IN ('English', 'French') AND T3.Continent = 'Europe' )	world_1
SELECT T2.Name FROM country AS T1 INNER JOIN country AS T2 ON T1.Code > T2.Code WHERE T1.SurfaceArea > ( SELECT MAX(SurfaceArea) FROM country ) AND T1.Continent = 'Europe'	world_1
SELECT T2.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Africa' AND T1.Population < ( SELECT MAX(Population) FROM country WHERE Continent = 'Asia' )	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese' AND T1.Population < ( SELECT MAX(Population) FROM country WHERE Continent = 'Asia' )	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Population > ( SELECT MAX(Population) FROM country WHERE Continent = 'Africa' ) AND T1.Continent = 'Asia'	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' AND T1.Population > ( SELECT MIN(T3.Population) FROM country AS T3 INNER JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T3.Continent = 'Africa' )	world_1
SELECT DISTINCT Code FROM country WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' )	world_1
SELECT DISTINCT Code FROM country WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' )	world_1
SELECT T1.Code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'English'	world_1
SELECT DISTINCT T2.Code FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language != 'English'	world_1
SELECT Code FROM country WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' ) AND GovernmentForm != 'Republic'	world_1
SELECT Code FROM country WHERE GovernmentForm != 'Republic' AND Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' )	world_1
SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code LEFT JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = 'Europe' AND T3.Language <> 'English'	world_1
SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN city AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.CountryCode IN ( SELECT Code FROM country WHERE Continent = 'Europe' ) AND T1.Language != 'English'	world_1
SELECT DISTINCT T2.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T1.Continent = 'Asia' AND T2.Language = 'Chinese'	world_1
SELECT DISTINCT T2.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese' AND T1.Continent = 'Asia'	world_1
SELECT T2.Name, T2.IndepYear, T2.SurfaceArea FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population LIMIT 1	world_1
SELECT T1.Name, T2.IndepYear, T1.SurfaceArea FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Percentage = 0 ORDER BY T1.Population LIMIT 1	world_1
SELECT T1.Name, T2.LifeExpectancy, T3.HeadOfState FROM country AS T1 INNER JOIN ( SELECT Code, MAX(SurfaceArea) AS SurfaceMax FROM country GROUP BY Code ) AS T2 ON T1.Code = T2.Code INNER JOIN countrylanguage AS T3 ON T1.Code = T3.CountryCode WHERE T2.SurfaceMax = ( SELECT MAX(SurfaceArea) FROM country )	world_1
SELECT T2.Name, T1.Population, T3.HeadOfState FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.CountryCode INNER JOIN countrylanguage AS T3 ON T3.CountryCode = T1.Code WHERE T1.SurfaceArea = ( SELECT MAX(SurfaceArea) FROM country )	world_1
SELECT T2.Name, COUNT(T1.CountryCode) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T1.CountryCode HAVING COUNT(T1.Language) > 3	world_1
SELECT T1.Name, COUNT(T2.Language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code HAVING COUNT(DISTINCT T2.Language) > 2	world_1
SELECT T2.District, COUNT(T1.ID) FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Population > ( SELECT AVG(Population) FROM city ) GROUP BY T2.District	world_1
SELECT COUNT(*) ,  District FROM city GROUP BY District HAVING SUM(Population)  >  ( SELECT AVG(Population) FROM city )	world_1
SELECT T2.GovernmentForm, SUM(T1.Population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.LifeExpectancy > 72 GROUP BY T2.GovernmentForm	world_1
SELECT T2.GovernmentForm, AVG(T1.LifeExpectancy) AS AverageLifeExpectancy, SUM(T1.Population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm IN ('Democracy', 'Republic') AND T1.LifeExpectancy > 72 GROUP BY T2.GovernmentForm	world_1
SELECT T2.Continent, AVG(T1.LifeExpectancy) AS AverageLifeExpectancy, SUM(T1.Population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.LifeExpectancy < 72 GROUP BY T2.Continent	world_1
SELECT T1.Continent, SUM(T2.Population), AVG(T2.LifeExpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent HAVING AVG(T2.LifeExpectancy) < 72	world_1
SELECT T1.Name, T2.SurfaceArea FROM country AS T1 INNER JOIN country AS T2 ON T1.Code = T2.Code ORDER BY T2.SurfaceArea DESC LIMIT 5	world_1
SELECT T2.Name, T1.SurfaceArea FROM country AS T1 INNER JOIN ( SELECT Code, SurfaceArea FROM country ORDER BY Population DESC LIMIT 5 ) AS T2 ON T1.Code = T2.Code	world_1
SELECT T2.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population DESC LIMIT 3	world_1
SELECT T2.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population DESC LIMIT 3	world_1
SELECT T1.Name FROM country AS T1 JOIN ( SELECT Code FROM country ORDER BY Population ASC LIMIT 3 ) AS T2 ON T1.Code = T2.Code	world_1
SELECT T2.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population LIMIT 3	world_1
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'	world_1
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'	world_1
SELECT T2.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Europe' AND T1.Population = 80000	world_1
SELECT T2.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Europe' AND T1.Population = 80000	world_1
SELECT SUM(c.Population) ,  AVG(s.SurfaceArea) FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'North America' AND s.SurfaceArea > 3000	world_1
SELECT SUM(c.SurfaceArea) / COUNT(*) , SUM(c.Population) FROM country AS c INNER JOIN city ON c.Code = city.CountryCode WHERE c.Region = 'North America' AND c.SurfaceArea > 3000	world_1
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000	world_1
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000	world_1
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1	world_1
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1	world_1
SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T2.CountryCode ORDER BY SUM(T2.Percentage) DESC LIMIT 1	world_1
SELECT T1.Code, T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.Percentage DESC	world_1
SELECT COUNT(DISTINCT T2.CountryCode) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Spanish' ORDER BY T1.Percentage DESC LIMIT 1	world_1
SELECT COUNT(DISTINCT T2.CountryCode) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Spanish' AND T1.IsOfficial = 1	world_1
SELECT T2.Code FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Percentage DESC LIMIT 1	world_1
SELECT Code FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 1	world_1
SELECT COUNT(DISTINCT Name) FROM conductor	orchestra
SELECT COUNT(*) FROM conductor	orchestra
SELECT Name FROM conductor ORDER BY Age ASC	orchestra
SELECT Name FROM conductor ORDER BY Age	orchestra
SELECT Name FROM conductor WHERE Nationality != 'USA'	orchestra
SELECT Name FROM conductor WHERE Nationality != 'USA'	orchestra
SELECT T2.Record_Company FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID ORDER BY T2.Year_of_Founded DESC	orchestra
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC	orchestra
SELECT AVG(Attendance) FROM show	orchestra
SELECT AVG(T2.Attendance) FROM performance AS T1 INNER JOIN show AS T2 ON T1.Performance_ID = T2.Performance_ID	orchestra
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final'	orchestra
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final'	orchestra
SELECT COUNT(DISTINCT Nationality) FROM conductor	orchestra
SELECT COUNT(DISTINCT Nationality) FROM conductor	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC	orchestra
SELECT T1.Name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name ORDER BY AVG(T2.Year_of_Founded - T1.Year_of_Work) DESC LIMIT 1	orchestra
SELECT T1.Name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY YEAR_OF_WORK DESC LIMIT 1	orchestra
SELECT T1.Name, T2.Orchestra FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID	orchestra
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID	orchestra
SELECT T1.Name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(T1.Conductor_ID) > 1	orchestra
SELECT T1.Name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(T1.Conductor_ID) > 1	orchestra
SELECT T2.Name FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Name ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1	orchestra
SELECT T1.Name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1	orchestra
SELECT T1.Name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE YEAR_of_Founded > 2008	orchestra
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008	orchestra
SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company	orchestra
SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company	orchestra
SELECT DISTINCT Major_Record_Format FROM orchestra ORDER BY COUNT(*) ASC	orchestra
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC	orchestra
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1	orchestra
SELECT T1.Record_Company FROM orchestra AS T1 INNER JOIN ( SELECT Record_Company, COUNT(*) as max_count FROM orchestra GROUP BY Record_company ORDER BY max_count DESC LIMIT 1 ) AS T2 ON T1.Record_Company = T2.Record_company	orchestra
SELECT DISTINCT T3.Orchestra FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID INNER JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID WHERE T3.Performance_ID IS NULL	orchestra
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )	orchestra
SELECT DISTINCT T1.Record_Company FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE YEAR_of_Founded < 2003 INTERSECT SELECT DISTINCT Record_Company FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE YEAR_of_Founded > 2003	orchestra
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < '2003' INTERSECT SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded > '2003'	orchestra
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')	orchestra
SELECT COUNT(Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')	orchestra
SELECT YEAR_of_Founded FROM orchestra WHERE Orchestra_ID IN ( SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(Orchestra_ID) > 1 )	orchestra
SELECT DISTINCT T2.Year_of_Founded FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Year_of_Founded HAVING COUNT(T2.Orchestra_ID) > 1	orchestra
SELECT COUNT(*) FROM Highschooler	network_1
SELECT COUNT(*) FROM Highschooler	network_1
SELECT name, grade FROM Highschooler	network_1
SELECT name, grade FROM Highschooler	network_1
SELECT grade FROM Highschooler	network_1
SELECT DISTINCT grade FROM Highschooler	network_1
SELECT grade FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT grade FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT name FROM Highschooler WHERE grade = 10	network_1
SELECT name FROM Highschooler WHERE grade = 10	network_1
SELECT DISTINCT T2.student_id FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T2.friend_id = T1.ID WHERE T1.name = 'Kyle'	network_1
SELECT ID FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)	network_1
SELECT COUNT(DISTINCT grade) FROM Highschooler WHERE grade IN (9, 10)	network_1
SELECT COUNT(grade) , grade FROM Highschooler GROUP BY grade	network_1
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade	network_1
SELECT DISTINCT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1	network_1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC LIMIT 1	network_1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4	network_1
SELECT DISTINCT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4	network_1
SELECT T1.student_id , COUNT(*) FROM Friend AS T2 JOIN Highschooler AS T1 ON T2.friend_id = T1.ID GROUP BY T1.student_id	network_1
SELECT COUNT(*) FROM Friend WHERE friend_id IN (SELECT ID FROM Highschooler)	network_1
SELECT T1.name, COUNT(T2.friend_id) FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name	network_1
SELECT T1.name, COUNT(T2.student_id) FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T2.friend_id = T1.ID GROUP BY T1.name	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY COUNT(T2.friend_id) DESC LIMIT 1	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY COUNT(T2.student_id) DESC LIMIT 1	network_1
SELECT T1.name FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T2.student_id = T1.ID GROUP BY T2.student_id HAVING COUNT(*) >= 3	network_1
SELECT T1.name FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(T2.friend_id) >= 3	network_1
SELECT T2.name FROM Friend AS T1 INNER JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T1.friend_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle')	network_1
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.ID WHERE T1.student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle')	network_1
SELECT COUNT(*) FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.student_id WHERE H.name = 'Kyle'	network_1
SELECT COUNT(*) FROM Friend WHERE friend_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle')	network_1
SELECT DISTINCT student_id FROM Friend WHERE friend_id IS NULL	network_1
SELECT DISTINCT student_id FROM Friend WHERE friend_id IS NULL	network_1
SELECT name FROM Highschooler WHERE ID NOT IN ( SELECT friend_id FROM Friend )	network_1
SELECT DISTINCT T1.name FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.student_id IS NULL	network_1
SELECT DISTINCT T1.id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id = T2.student_id WHERE T2.friend_id != T1.id EXCEPT SELECT DISTINCT T1.id FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.id = T2.liked_id	network_1
SELECT DISTINCT student_id FROM Friend UNION ALL SELECT student_id FROM Likes	network_1
SELECT T1.name FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(DISTINCT T2.friend_id) > 0 INTERSECT SELECT T1.name FROM Highschooler AS T1 INNER JOIN Likes AS T2 ON T1.ID = T2.liked_id	network_1
SELECT DISTINCT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Likes AS T3 ON T1.ID = T3.student_id	network_1
SELECT COUNT(*) ,  T1.student_id FROM Likes AS T1 INNER JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T1.student_id	network_1
SELECT COUNT(*) , T1.student_id FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T1.student_id	network_1
SELECT name, COUNT(liked_id) FROM Likes GROUP BY liked_id	network_1
SELECT T1.name, COUNT(T2.student_id) FROM Highschooler AS T1 INNER JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY COUNT(T2.liked_id) DESC LIMIT 1	network_1
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.ID ORDER BY COUNT(T1.student_id) DESC LIMIT 1	network_1
SELECT DISTINCT T1.name FROM Highschooler AS T1 INNER JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING COUNT(T2.student_id) >= 2	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING COUNT(T2.student_id) > 1	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(T2.friend_id) >= 2 AND T1.grade > 5	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(*) >= 2 AND T1.grade > 5	network_1
SELECT COUNT(T1.liked_id) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = 'Kyle'	network_1
SELECT COUNT(*) FROM Likes WHERE liked_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle')	network_1
SELECT AVG(T1.grade) FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(DISTINCT T2.friend_id) > 0	network_1
SELECT AVG(T1.grade) FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id	network_1
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)	network_1
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)	network_1
SELECT T1.state FROM Owners AS T1 INNER JOIN Professionals AS T2 ON T1.state = T2.state GROUP BY T1.state HAVING COUNT(*) > 1	dog_kennels
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals	dog_kennels
SELECT AVG(T1.age) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id	dog_kennels
SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id	dog_kennels
SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T1.state = 'IN' OR COUNT(T2.treatment_id) > 2	dog_kennels
SELECT T1.professional_id ,  T2.last_name ,  T2.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) > 2 OR T1.state = 'Indiana'	dog_kennels
SELECT T1.name FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.cost_of_treatment <= 1000	dog_kennels
SELECT T2.name FROM Treatments AS T1 INNER JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id WHERE T1.cost_of_treatment <= 1000 GROUP BY T2.name	dog_kennels
SELECT DISTINCT T1.first_name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.first_name NOT IN ( SELECT name FROM Dogs )	dog_kennels
SELECT DISTINCT first_name FROM Professionals UNION SELECT DISTINCT first_name FROM Owners EXCEPT SELECT DISTINCT first_name FROM Dogs	dog_kennels
SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.treatment_id IS NULL	dog_kennels
SELECT professional_id ,  role_code ,  email_address FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )	dog_kennels
SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY COUNT(*) DESC LIMIT 1	dog_kennels
SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY COUNT(T2.dog_id) DESC LIMIT 1	dog_kennels
SELECT T1.professional_id, T2.role_code, T3.first_name FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1 profesional_id = T2 professional_id GROUP BY T1.professional_id HAVING COUNT(*) >= 2	dog_kennels
SELECT T2.professional_id, T2.role_code, T1.first_name FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T2.professional_id HAVING COUNT(*) >= 2	dog_kennels
SELECT T1.breed_name FROM Breeds AS T1 INNER JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.breed_code ORDER BY COUNT(T2.dog_id) DESC LIMIT 1	dog_kennels
SELECT T2.breed_name FROM Dogs AS T1 INNER JOIN Breeds AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_code ORDER BY COUNT(T1.breed_code) DESC LIMIT 1	dog_kennels
SELECT T2.owner_id, T2.last_name FROM Treatments AS T1 INNER JOIN Owners AS T2 ON T1.dog_id = T2.owner_id GROUP BY T1.dog_id ORDER BY COUNT(*) DESC LIMIT 1	dog_kennels
SELECT T1.owner_id, T1.last_name FROM Owners AS T1 INNER JOIN Treatments AS T2 ON T1.owner_id = T2.dog_id GROUP BY T1.owner_id ORDER BY SUM(T2.cost_of_treatment) DESC LIMIT 1	dog_kennels
SELECT T2.treatment_type_description FROM Charges AS T1 INNER JOIN Treatment_Types AS T2 ON T1.charge_type = T2.treatment_type_code GROUP BY T1.charge_type ORDER BY SUM(T1.charge_amount) LIMIT 1	dog_kennels
SELECT T2.treatment_type_description FROM Charges AS T1 INNER JOIN Treatments AS T2 ON T1.charge_id = T2.cost_of_treatment GROUP BY T1.charge_amount ORDER BY SUM(T1.charge_amount) ASC LIMIT 1	dog_kennels
SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Treatments AS T3 ON T2.owner_id = T3.professional_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1	dog_kennels
SELECT T2.owner_id, T2.zip_code FROM Treatments AS T1 INNER JOIN Owners AS T2 ON T1.dog_id = T2.owner_id GROUP BY T2.owner_id ORDER BY SUM(T1.cost_of_treatment) DESC LIMIT 1	dog_kennels
SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(T2.treatment_type_code) > 1	dog_kennels
SELECT professional_id, cell_number FROM Professionals WHERE role_code IN ( SELECT GROUP_CONCAT(DISTINCT role_code) FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_type_code)  >  1 )	dog_kennels
SELECT T1.first_name, T1.last_name FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING AVG(T2.cost_of_treatment) < ( SELECT AVG(cost_of_treatment) FROM Treatments )	dog_kennels
SELECT T1.first_name, T1.last_name FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.first_name, T1.last_name HAVING AVG(T2.cost_of_treatment) < ( SELECT AVG(cost_of_treatment) FROM Treatments )	dog_kennels
SELECT T2.date_of_treatment, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id	dog_kennels
SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 INNER JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.date_of_treatment, T2.first_name	dog_kennels
SELECT T2.cost_of_treatment, T1.treatment_type_description FROM Treatment_Types AS T1 INNER JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code	dog_kennels
SELECT T2.cost_of_treatment, T1.treatment_type_description FROM Treatment_Types AS T1 INNER JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code	dog_kennels
SELECT T1.first_name, T1.last_name, T2.size_description FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id	dog_kennels
SELECT T1.first_name, T1.last_name, T2.size_description FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id	dog_kennels
SELECT T1.first_name, T2.name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id	dog_kennels
SELECT T1.first_name , T3.name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Breeds AS T3 ON T2.breed_code = T3.breed_code	dog_kennels
SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id INNER JOIN Breeds AS T3 ON T1.breed_code = T3.breed_code WHERE T3.breed_name = ( SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1 )	dog_kennels
SELECT T2.name, T3.date_of_treatment FROM Breeds AS T1 INNER JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code INNER JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id ORDER BY T1.breed_name DESC LIMIT 1	dog_kennels
SELECT T1.first_name, T2.name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'	dog_kennels
SELECT T1.first_name, T2.name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'	dog_kennels
SELECT T1.date_arrived, T2.date_departed FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id	dog_kennels
SELECT T2.date_arrived, T2.date_departed FROM Treatments AS T1 INNER JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id	dog_kennels
SELECT T1.last_name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age LIMIT 1	dog_kennels
SELECT T1.last_name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.date_of_birth LIMIT 1	dog_kennels
SELECT DISTINCT T1.email_address FROM Professionals AS T1 INNER JOIN Owners AS T2 ON T1.professional_id = T2.owner_id WHERE T2.state IN ('HI', 'WI')	dog_kennels
SELECT email_address FROM Professionals WHERE state IN ('HI', 'WI')	dog_kennels
SELECT T2.date_arrived, T2.date_departed FROM Sizes AS T1 INNER JOIN Dogs AS T2 ON T1.size_code = T2.size_code	dog_kennels
SELECT date_arrived ,  date_departed FROM Dogs	dog_kennels
SELECT COUNT(DISTINCT T2.dog_id) FROM Treatments AS T1 INNER JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id	dog_kennels
SELECT COUNT(T1.dog_id) FROM Treatments AS T1 INNER JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id	dog_kennels
SELECT COUNT(T1.professional_id) FROM Treatments AS T1 INNER JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id INNER JOIN Professionals AS T3 ON T1.professional_id = T3.professional_id	dog_kennels
SELECT COUNT(DISTINCT T2.professional_id) FROM Treatments AS T1 INNER JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id	dog_kennels
SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 INNER JOIN Owners AS T2 ON T1.professional_id = T2.owner_id WHERE T2.city LIKE '%West%'	dog_kennels
SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 INNER JOIN Owners AS T2 ON T1.professional_id = T2.owner_id WHERE T2.city LIKE '%West%'	dog_kennels
SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state LIKE '%North %'	dog_kennels
SELECT T1.first_name ,  T1.last_name ,  T1.email_address FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state LIKE '%North%'	dog_kennels
SELECT COUNT(*) FROM Dogs WHERE age < ( SELECT AVG(age) FROM Dogs )	dog_kennels
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)	dog_kennels
SELECT MAX(T2.cost_of_treatment) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id ORDER BY T2.date_of_treatment DESC LIMIT 1	dog_kennels
SELECT T2.cost_of_treatment FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id ORDER BY T2.date_of_treatment DESC LIMIT 1	dog_kennels
SELECT COUNT(T1.dog_id) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id HAVING COUNT(T2.treatment_type_code) = 0	dog_kennels
SELECT COUNT(T1.dog_id) FROM Dogs AS T1 LEFT JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.treatment_type_code IS NULL	dog_kennels
SELECT COUNT(owner_id) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )	dog_kennels
SELECT COUNT(owner_id) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )	dog_kennels
SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )	dog_kennels
SELECT COUNT(DISTINCT T1.professional_id) FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.treatment_id IS NULL	dog_kennels
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1'	dog_kennels
SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 INNER JOIN Owners AS T2 ON T1.owner_id = T2.owner_id WHERE T1.abandoned_yn = 1	dog_kennels
SELECT AVG(age) FROM Dogs	dog_kennels
SELECT AVG(age) FROM Dogs	dog_kennels
SELECT MAX(age) FROM Dogs	dog_kennels
SELECT MAX(age) FROM Dogs	dog_kennels
SELECT T1.charge_type, T1.charge_amount FROM Charges AS T1	dog_kennels
SELECT DISTINCT T1.charge_type, T1.charge_amount FROM Charges AS T1	dog_kennels
SELECT MAX(T1.charge_amount) FROM Charges AS T1	dog_kennels
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1	dog_kennels
SELECT email_address, cell_number, home_phone FROM Professionals	dog_kennels
SELECT email_address, cell_number, home_phone FROM Professionals	dog_kennels
SELECT DISTINCT T1.breed_name, T2.size_description FROM Breeds AS T1 INNER JOIN Sizes AS T2 ON T1.breed_code = T2.size_code	dog_kennels
SELECT DISTINCT T1.breed_name, T2.size_description FROM Breeds AS T1 INNER JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code	dog_kennels
SELECT T2.first_name ,  T3.treatment_type_description FROM Treatments AS T1 INNER JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id INNER JOIN Treatment_Types AS T3 ON T1.treatment_type_code = T3.treatment_type_code	dog_kennels
SELECT T1.first_name, T3.treatment_type_description FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id INNER JOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code	dog_kennels
SELECT COUNT(Singer_ID) FROM singer	singer
SELECT COUNT(Singer_ID) FROM singer	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC	singer
SELECT Birth_Year, Citizenship FROM singer	singer
SELECT Birth_Year, Citizenship FROM singer	singer
SELECT Name FROM singer WHERE Citizenship != 'France'	singer
SELECT Name FROM singer WHERE Citizenship != 'French'	singer
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)	singer
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Birth_Year IN (1948, 1949)	singer
SELECT T2.Name FROM song AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID ORDER BY T2.Net_Worth_Millions DESC LIMIT 1	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1	singer
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship	singer
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship	singer
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1	singer
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1	singer
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship	singer
SELECT MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship	singer
SELECT Title, Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID	singer
SELECT T2.Title, T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID	singer
SELECT DISTINCT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Sales > 300000	singer
SELECT DISTINCT T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000	singer
SELECT Name FROM singer GROUP BY Name HAVING COUNT(Song_ID)  >  1	singer
SELECT T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(T2.Song_ID) > 1	singer
SELECT T2.Name ,  SUM(T1.Sales) FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Name	singer
SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name	singer
SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song )	singer
SELECT DISTINCT T2.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Song_ID IS NULL	singer
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955	singer
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 AND Birth_Year > 1955	singer
SELECT COUNT(DISTINCT T2.feature_type_code) FROM Other_Available_Features AS T1 INNER JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code	real_estate_properties
SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 INNER JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'	real_estate_properties
SELECT T2.property_type_description FROM Ref_Property_Types AS T1 INNER JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code WHERE T1.property_type_code = '1033'	real_estate_properties
SELECT DISTINCT T3.property_name FROM Ref_Feature_Types AS T1 INNER JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code INNER JOIN Properties AS T3 ON T1.feature_type_code = T3.property_type_code WHERE (T3.apt_feature_1 IS NOT NULL AND T3.apt_feature_1 > 0) OR (T3.hse_feature_1 IS NOT NULL AND T3.hse_feature_1 > 0) OR (T3 fld_feature_1 IS NOT NULL AND T3 fld_feature_1 > 1)	real_estate_properties
